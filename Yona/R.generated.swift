// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.createAccount.validateImages()
    storyboard.createAccount.validateViewControllers()
    storyboard.friends.validateImages()
    storyboard.friends.validateViewControllers()
    storyboard.addDeviceViewController.validateImages()
    storyboard.addDeviceViewController.validateViewControllers()
    storyboard.profile.validateImages()
    storyboard.profile.validateViewControllers()
    storyboard.signUp.validateImages()
    storyboard.signUp.validateViewControllers()
    storyboard.login.validateImages()
    storyboard.login.validateViewControllers()
    storyboard.dashboard.validateImages()
    storyboard.dashboard.validateViewControllers()
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
    storyboard.challenges.validateImages()
    storyboard.challenges.validateViewControllers()
    storyboard.settings.validateImages()
    storyboard.settings.validateViewControllers()
    storyboard.confirmPasscode.validateImages()
    storyboard.confirmPasscode.validateViewControllers()
    storyboard.passcode.validateImages()
    storyboard.passcode.validateViewControllers()
    storyboard.walkThrough.validateImages()
    storyboard.walkThrough.validateViewControllers()
    storyboard.sMSValidation.validateImages()
    storyboard.sMSValidation.validateViewControllers()
    storyboard.welcome.validateImages()
    storyboard.welcome.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct file {
    static var iQKeyboardManagerBundle: NSURL? { return _R.hostingBundle?.URLForResource("IQKeyboardManager", withExtension: "bundle") }
    static var launchScreenStrings: NSURL? { return _R.hostingBundle?.URLForResource("LaunchScreen", withExtension: "strings") }
    static var mainStrings: NSURL? { return _R.hostingBundle?.URLForResource("Main", withExtension: "strings") }
    static var oswaldBoldItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-BoldItalic", withExtension: "ttf") }
    static var oswaldBoldTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Bold", withExtension: "ttf") }
    static var oswaldDemiBoldItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Demi-BoldItalic", withExtension: "ttf") }
    static var oswaldDemiBoldTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-DemiBold", withExtension: "ttf") }
    static var oswaldExtraLightItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Extra-LightItalic", withExtension: "ttf") }
    static var oswaldExtraLightTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-ExtraLight", withExtension: "ttf") }
    static var oswaldHeavyItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-HeavyItalic", withExtension: "ttf") }
    static var oswaldHeavyTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Heavy", withExtension: "ttf") }
    static var oswaldLightItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-LightItalic", withExtension: "ttf") }
    static var oswaldLightTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Light", withExtension: "ttf") }
    static var oswaldMediumItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-MediumItalic", withExtension: "ttf") }
    static var oswaldMediumTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Medium", withExtension: "ttf") }
    static var oswaldRegularItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-RegularItalic", withExtension: "ttf") }
    static var oswaldRegularTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Regular", withExtension: "ttf") }
    static var oswaldStencilTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Stencil", withExtension: "ttf") }
    static var robotoBlackItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BlackItalic", withExtension: "ttf") }
    static var robotoBlackTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Black", withExtension: "ttf") }
    static var robotoBoldCondensedItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BoldCondensedItalic", withExtension: "ttf") }
    static var robotoBoldCondensedTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BoldCondensed", withExtension: "ttf") }
    static var robotoBoldItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BoldItalic", withExtension: "ttf") }
    static var robotoBoldTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Bold", withExtension: "ttf") }
    static var robotoCondensedItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-CondensedItalic", withExtension: "ttf") }
    static var robotoCondensedTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Condensed", withExtension: "ttf") }
    static var robotoItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Italic", withExtension: "ttf") }
    static var robotoLightItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-LightItalic", withExtension: "ttf") }
    static var robotoLightTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Light", withExtension: "ttf") }
    static var robotoMediumItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-MediumItalic", withExtension: "ttf") }
    static var robotoMediumTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Medium", withExtension: "ttf") }
    static var robotoRegularTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Regular", withExtension: "ttf") }
    static var robotoThinItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-ThinItalic", withExtension: "ttf") }
    static var sFUIDisplayBlackOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Black", withExtension: "otf") }
    static var sFUIDisplayBoldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Bold", withExtension: "otf") }
    static var sFUIDisplayHeavyOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Heavy", withExtension: "otf") }
    static var sFUIDisplayLightOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Light", withExtension: "otf") }
    static var sFUIDisplayMediumOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Medium", withExtension: "otf") }
    static var sFUIDisplayRegularOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Regular", withExtension: "otf") }
    static var sFUIDisplaySemiboldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Semibold", withExtension: "otf") }
    static var sFUIDisplayThinOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Thin", withExtension: "otf") }
    static var sFUIDisplayUltralightOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Ultralight", withExtension: "otf") }
    static var sFUITextBoldItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-BoldItalic", withExtension: "otf") }
    static var sFUITextBoldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Bold", withExtension: "otf") }
    static var sFUITextHeavyItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-HeavyItalic", withExtension: "otf") }
    static var sFUITextHeavyOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Heavy", withExtension: "otf") }
    static var sFUITextLightItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-LightItalic", withExtension: "otf") }
    static var sFUITextLightOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Light", withExtension: "otf") }
    static var sFUITextMediumItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-MediumItalic", withExtension: "otf") }
    static var sFUITextMediumOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Medium", withExtension: "otf") }
    static var sFUITextRegularItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-RegularItalic", withExtension: "otf") }
    static var sFUITextRegularOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Regular", withExtension: "otf") }
    static var sFUITextSemiboldItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-SemiboldItalic", withExtension: "otf") }
    static var sFUITextSemiboldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Semibold", withExtension: "otf") }
    static var secretKeysPlist: NSURL? { return _R.hostingBundle?.URLForResource("SecretKeys", withExtension: "plist") }
  }
  
  struct font {
    static func oswaldBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Bold", size: size)
    }
    
    static func oswaldBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-BoldItalic", size: size)
    }
    
    static func oswaldDemiBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-DemiBold", size: size)
    }
    
    static func oswaldDemiBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Demi-BoldItalic", size: size)
    }
    
    static func oswaldExtraLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-ExtraLight", size: size)
    }
    
    static func oswaldExtraLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Extra-LightItalic", size: size)
    }
    
    static func oswaldHeavy(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Heavy", size: size)
    }
    
    static func oswaldHeavyItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-HeavyItalic", size: size)
    }
    
    static func oswaldLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Light", size: size)
    }
    
    static func oswaldLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-LightItalic", size: size)
    }
    
    static func oswaldMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Medium", size: size)
    }
    
    static func oswaldMediumItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-MediumItalic", size: size)
    }
    
    static func oswaldRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Regular", size: size)
    }
    
    static func oswaldRegularItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-RegularItalic", size: size)
    }
    
    static func oswaldStencilBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "OswaldStencil-Bold", size: size)
    }
    
    static func robotoBlack(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Black", size: size)
    }
    
    static func robotoBlackItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BlackItalic", size: size)
    }
    
    static func robotoBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Bold", size: size)
    }
    
    static func robotoBoldCondensed(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BoldCondensed", size: size)
    }
    
    static func robotoBoldCondensedItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BoldCondensedItalic", size: size)
    }
    
    static func robotoBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BoldItalic", size: size)
    }
    
    static func robotoCondensed(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Condensed", size: size)
    }
    
    static func robotoCondensedItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-CondensedItalic", size: size)
    }
    
    static func robotoItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Italic", size: size)
    }
    
    static func robotoLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Light", size: size)
    }
    
    static func robotoLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-LightItalic", size: size)
    }
    
    static func robotoMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Medium", size: size)
    }
    
    static func robotoMediumItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-MediumItalic", size: size)
    }
    
    static func robotoRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Regular", size: size)
    }
    
    static func robotoThinItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-ThinItalic", size: size)
    }
    
    static func sFUIDisplayBlack(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Black", size: size)
    }
    
    static func sFUIDisplayBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Bold", size: size)
    }
    
    static func sFUIDisplayHeavy(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Heavy", size: size)
    }
    
    static func sFUIDisplayLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Light", size: size)
    }
    
    static func sFUIDisplayMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Medium", size: size)
    }
    
    static func sFUIDisplayRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Regular", size: size)
    }
    
    static func sFUIDisplaySemibold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Semibold", size: size)
    }
    
    static func sFUIDisplayThin(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Thin", size: size)
    }
    
    static func sFUIDisplayUltralight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Ultralight", size: size)
    }
    
    static func sFUITextBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Bold", size: size)
    }
    
    static func sFUITextBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-BoldItalic", size: size)
    }
    
    static func sFUITextHeavy(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Heavy", size: size)
    }
    
    static func sFUITextHeavyItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-HeavyItalic", size: size)
    }
    
    static func sFUITextItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Italic", size: size)
    }
    
    static func sFUITextLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Light", size: size)
    }
    
    static func sFUITextLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-LightItalic", size: size)
    }
    
    static func sFUITextMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Medium", size: size)
    }
    
    static func sFUITextMediumItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-MediumItalic", size: size)
    }
    
    static func sFUITextRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Regular", size: size)
    }
    
    static func sFUITextSemibold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Semibold", size: size)
    }
    
    static func sFUITextSemiboldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-SemiboldItalic", size: size)
    }
  }
  
  struct image {
    static var addAvatar: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "addAvatar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "addAvatar") } }
    static var addCircel: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "addCircel", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "addCircel") } }
    static var adultHappuSmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappuSmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappuSmall") } }
    static var adultHappy: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappy", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappy") } }
    static var adultHappyMedium: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappyMedium", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappyMedium") } }
    static var adultHappySmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappySmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappySmall") } }
    static var adultReview: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultReview", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultReview") } }
    static var adultReviewMedium: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultReviewMedium", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultReviewMedium") } }
    static var adultReviewSmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultReviewSmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultReviewSmall") } }
    static var adultSad: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultSad", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultSad") } }
    static var adultSadMedium: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultSadMedium", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultSadMedium") } }
    static var adultSadSmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultSadSmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultSadSmall") } }
    static var bdgEncouragementBestTime: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "bdgEncouragementBestTime", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "bdgEncouragementBestTime") } }
    static var bdgTenDay: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "bdgTenDay", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "bdgTenDay") } }
    static var brandAssets: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "Brand Assets", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "Brand Assets") } }
    static var confinesSlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "confinesSlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "confinesSlide") } }
    static var first: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "first", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "first") } }
    static var iQButtonBarArrowLeft: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "IQButtonBarArrowLeft", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "IQButtonBarArrowLeft") } }
    static var iQButtonBarArrowRight: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "IQButtonBarArrowRight", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "IQButtonBarArrowRight") } }
    static var icnAccountCreated: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAccountCreated", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAccountCreated") } }
    static var icnAdd: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAdd", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAdd") } }
    static var icnAvatar: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAvatar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAvatar") } }
    static var icnBack: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnBack", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnBack") } }
    static var icnChallengeActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeActive") } }
    static var icnChallengeNogo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeNogo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeNogo") } }
    static var icnChallengeTimebucket: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeTimebucket", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeTimebucket") } }
    static var icnChallengeTimezone: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeTimezone", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeTimezone") } }
    static var icnChallenges: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallenges", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallenges") } }
    static var icnCreate: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnCreate", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnCreate") } }
    static var icnDateBack: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnDateBack", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnDateBack") } }
    static var icnDateForward: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnDateForward", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnDateForward") } }
    static var icnEdit: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnEdit", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnEdit") } }
    static var icnFriends: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnFriends", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnFriends") } }
    static var icnFriendsActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnFriendsActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnFriendsActive") } }
    static var icnMail: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMail", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMail") } }
    static var icnMe: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMe", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMe") } }
    static var icnMeActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMeActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMeActive") } }
    static var icnMobile: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMobile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMobile") } }
    static var icnMoon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMoon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMoon") } }
    static var icnName: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnName", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnName") } }
    static var icnNext: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNext", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNext") } }
    static var icnNickname: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNickname", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNickname") } }
    static var icnNo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNo") } }
    static var icnOk: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnOk", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnOk") } }
    static var icnReminder: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnReminder", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnReminder") } }
    static var icnSecure: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSecure", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSecure") } }
    static var icnSettings: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSettings", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSettings") } }
    static var icnSettingsActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSettingsActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSettingsActive") } }
    static var icnSun: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSun", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSun") } }
    static var icnTrash: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnTrash", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnTrash") } }
    static var icnY: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnY", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnY") } }
    static var iconMoon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "iconMoon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "iconMoon") } }
    static var imgBorders: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgBorders", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgBorders") } }
    static var imgShare: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgShare", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgShare") } }
    static var imgTime: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgTime", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgTime") } }
    static var imgTransparantie: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgTransparantie", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgTransparantie") } }
    static var second: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "second", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "second") } }
    static var sharingSlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "sharingSlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "sharingSlide") } }
    static var timespentSlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timespentSlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timespentSlide") } }
    static var transparencySlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "transparencySlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "transparencySlide") } }
    static var walkthroughPage: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "walkthroughPage", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "walkthroughPage") } }
    static var welcomeScreen: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "welcomeScreen", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "welcomeScreen") } }
    static var yonaLogo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "yonaLogo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "yonaLogo") } }
  }
  
  struct nib {
    static var yonaCustomDatePickerView: _R.nib._YonaCustomDatePickerView { return _R.nib._YonaCustomDatePickerView() }
    static var yonaCustomPickerView: _R.nib._YonaCustomPickerView { return _R.nib._YonaCustomPickerView() }
  }
  
  struct reuseIdentifier {
    static var timeZoneCell: ReuseIdentifier<TimeZoneTableViewCell> { return ReuseIdentifier(identifier: "timeZoneCell") }
  }
  
  struct segue {
    struct dashboardTabBarController {
      static var challenges: StoryboardSegueIdentifier<TabBarSegue, DashboardTabBarController, UIViewController> { return StoryboardSegueIdentifier(identifier: "Challenges") }
      static var friends: StoryboardSegueIdentifier<TabBarSegue, DashboardTabBarController, UIViewController> { return StoryboardSegueIdentifier(identifier: "Friends") }
      static var profile: StoryboardSegueIdentifier<TabBarSegue, DashboardTabBarController, UIViewController> { return StoryboardSegueIdentifier(identifier: "Profile") }
      static var settings: StoryboardSegueIdentifier<TabBarSegue, DashboardTabBarController, UIViewController> { return StoryboardSegueIdentifier(identifier: "Settings") }
    }
    
    struct signUpFirstStepViewController {
      static var signUpSeconStepSegue: StoryboardSegueIdentifier<UIStoryboardSegue, SignUpFirstStepViewController, SignUpSecondStepViewController> { return StoryboardSegueIdentifier(identifier: "SignUpSeconStepSegue") }
    }
    
    struct timeBucketChallenges {
      static var budgetChallengeSegue: StoryboardSegueIdentifier<UIStoryboardSegue, TimeBucketChallenges, TimeFrameBudgetChallengeViewController> { return StoryboardSegueIdentifier(identifier: "BudgetChallengeSegue") }
      static var noGoChallengeSegue: StoryboardSegueIdentifier<UIStoryboardSegue, TimeBucketChallenges, TimeFrameNoGoChallengeViewController> { return StoryboardSegueIdentifier(identifier: "NoGoChallengeSegue") }
      static var timezoneChallengeSegue: StoryboardSegueIdentifier<UIStoryboardSegue, TimeBucketChallenges, TimeFrameTimeZoneChallengeViewController> { return StoryboardSegueIdentifier(identifier: "TimezoneChallengeSegue") }
    }
  }
  
  struct storyboard {
    struct addDeviceViewController {
      static var addDeviceStoryboard: AddDeviceViewController? { return instance.instantiateViewControllerWithIdentifier("AddDeviceStoryboard") as? AddDeviceViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "AddDeviceViewController", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "icnAvatar") != nil, "[R.swift] Image named 'icnAvatar' is used in storyboard 'AddDeviceViewController', but couldn't be loaded.")
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'AddDeviceViewController', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(addDeviceStoryboard != nil, "[R.swift] ViewController with identifier 'addDeviceStoryboard' could not be loaded from storyboard 'AddDeviceViewController' as 'AddDeviceViewController'.")
      }
    }
    
    struct challenges {
      static var challengesStoryboard: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("ChallengesStoryboard") as? UINavigationController }
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Challenges", bundle: _R.hostingBundle) }
      static var timeFrameBudgetChallengeStoryboard: TimeFrameBudgetChallengeViewController? { return instance.instantiateViewControllerWithIdentifier("TimeFrameBudgetChallengeStoryboard") as? TimeFrameBudgetChallengeViewController }
      static var timeFrameNoGoChallengeStoryboard: TimeFrameNoGoChallengeViewController? { return instance.instantiateViewControllerWithIdentifier("TimeFrameNoGoChallengeStoryboard") as? TimeFrameNoGoChallengeViewController }
      static var timeFrameTimeZoneChallengeStoryboard: TimeFrameTimeZoneChallengeViewController? { return instance.instantiateViewControllerWithIdentifier("TimeFrameTimeZoneChallengeStoryboard") as? TimeFrameTimeZoneChallengeViewController }
      
      static func validateImages() {
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeTimebucket") != nil, "[R.swift] Image named 'icnChallengeTimebucket' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeTimezone") != nil, "[R.swift] Image named 'icnChallengeTimezone' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnTrash") != nil, "[R.swift] Image named 'icnTrash' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "addCircel") != nil, "[R.swift] Image named 'addCircel' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeNogo") != nil, "[R.swift] Image named 'icnChallengeNogo' is used in storyboard 'Challenges', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(challengesStoryboard != nil, "[R.swift] ViewController with identifier 'challengesStoryboard' could not be loaded from storyboard 'Challenges' as 'UINavigationController'.")
        assert(timeFrameTimeZoneChallengeStoryboard != nil, "[R.swift] ViewController with identifier 'timeFrameTimeZoneChallengeStoryboard' could not be loaded from storyboard 'Challenges' as 'TimeFrameTimeZoneChallengeViewController'.")
        assert(timeFrameBudgetChallengeStoryboard != nil, "[R.swift] ViewController with identifier 'timeFrameBudgetChallengeStoryboard' could not be loaded from storyboard 'Challenges' as 'TimeFrameBudgetChallengeViewController'.")
        assert(timeFrameNoGoChallengeStoryboard != nil, "[R.swift] ViewController with identifier 'timeFrameNoGoChallengeStoryboard' could not be loaded from storyboard 'Challenges' as 'TimeFrameNoGoChallengeViewController'.")
      }
    }
    
    struct confirmPasscode {
      static var confirmPasscodeStoryboard: ConfirmPasscodeViewController? { return instance.instantiateViewControllerWithIdentifier("ConfirmPasscodeStoryboard") as? ConfirmPasscodeViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "ConfirmPasscode", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "icnSecure") != nil, "[R.swift] Image named 'icnSecure' is used in storyboard 'ConfirmPasscode', but couldn't be loaded.")
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'ConfirmPasscode', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(confirmPasscodeStoryboard != nil, "[R.swift] ViewController with identifier 'confirmPasscodeStoryboard' could not be loaded from storyboard 'ConfirmPasscode' as 'ConfirmPasscodeViewController'.")
      }
    }
    
    struct createAccount {
      static var createAccountStoryboard: CreateAccountViewController? { return instance.instantiateViewControllerWithIdentifier("CreateAccountStoryboard") as? CreateAccountViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "CreateAccount", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(createAccountStoryboard != nil, "[R.swift] ViewController with identifier 'createAccountStoryboard' could not be loaded from storyboard 'CreateAccount' as 'CreateAccountViewController'.")
      }
    }
    
    struct dashboard {
      static var dashboardStoryboard: DashboardTabBarController? { return instance.instantiateViewControllerWithIdentifier("DashboardStoryboard") as? DashboardTabBarController }
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Dashboard", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "icnSettings") != nil, "[R.swift] Image named 'icnSettings' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnFriends") != nil, "[R.swift] Image named 'icnFriends' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnMeActive") != nil, "[R.swift] Image named 'icnMeActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnChallenges") != nil, "[R.swift] Image named 'icnChallenges' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnSettingsActive") != nil, "[R.swift] Image named 'icnSettingsActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeActive") != nil, "[R.swift] Image named 'icnChallengeActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnFriendsActive") != nil, "[R.swift] Image named 'icnFriendsActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnMe") != nil, "[R.swift] Image named 'icnMe' is used in storyboard 'Dashboard', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(dashboardStoryboard != nil, "[R.swift] ViewController with identifier 'dashboardStoryboard' could not be loaded from storyboard 'Dashboard' as 'DashboardTabBarController'.")
      }
    }
    
    struct friends {
      static var friendsStoryboard: FriendsViewController? { return instance.instantiateViewControllerWithIdentifier("FriendsStoryboard") as? FriendsViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Friends", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(friendsStoryboard != nil, "[R.swift] ViewController with identifier 'friendsStoryboard' could not be loaded from storyboard 'Friends' as 'FriendsViewController'.")
      }
    }
    
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct login {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Login", bundle: _R.hostingBundle) }
      static var loginStoryboard: LoginViewController? { return instance.instantiateViewControllerWithIdentifier("LoginStoryboard") as? LoginViewController }
      
      static func validateImages() {
        assert(UIImage(named: "icnY") != nil, "[R.swift] Image named 'icnY' is used in storyboard 'Login', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(loginStoryboard != nil, "[R.swift] ViewController with identifier 'loginStoryboard' could not be loaded from storyboard 'Login' as 'LoginViewController'.")
      }
    }
    
    struct main {
      static var initialViewController: UITabBarController? { return instance.instantiateInitialViewController() as? UITabBarController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "first") != nil, "[R.swift] Image named 'first' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "second") != nil, "[R.swift] Image named 'second' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct passcode {
      static var instance: UIStoryboard { return UIStoryboard(name: "Passcode", bundle: _R.hostingBundle) }
      static var passcodeStoryboard: SetPasscodeViewController? { return instance.instantiateViewControllerWithIdentifier("PasscodeStoryboard") as? SetPasscodeViewController }
      
      static func validateImages() {
        assert(UIImage(named: "icnAccountCreated") != nil, "[R.swift] Image named 'icnAccountCreated' is used in storyboard 'Passcode', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(passcodeStoryboard != nil, "[R.swift] ViewController with identifier 'passcodeStoryboard' could not be loaded from storyboard 'Passcode' as 'SetPasscodeViewController'.")
      }
    }
    
    struct profile {
      static var instance: UIStoryboard { return UIStoryboard(name: "Profile", bundle: _R.hostingBundle) }
      static var profileStoryboard: ProfileViewController? { return instance.instantiateViewControllerWithIdentifier("ProfileStoryboard") as? ProfileViewController }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(profileStoryboard != nil, "[R.swift] ViewController with identifier 'profileStoryboard' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.")
      }
    }
    
    struct sMSValidation {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "SMSValidation", bundle: _R.hostingBundle) }
      static var sMSValidationViewController: SMSValidationViewController? { return instance.instantiateViewControllerWithIdentifier("sMSValidationViewController") as? SMSValidationViewController }
      
      static func validateImages() {
        assert(UIImage(named: "addAvatar") != nil, "[R.swift] Image named 'addAvatar' is used in storyboard 'SMSValidation', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(sMSValidationViewController != nil, "[R.swift] ViewController with identifier 'sMSValidationViewController' could not be loaded from storyboard 'SMSValidation' as 'SMSValidationViewController'.")
      }
    }
    
    struct settings {
      static var instance: UIStoryboard { return UIStoryboard(name: "Settings", bundle: _R.hostingBundle) }
      static var settingsStoryboard: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("SettingsStoryboard") as? UINavigationController }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(settingsStoryboard != nil, "[R.swift] ViewController with identifier 'settingsStoryboard' could not be loaded from storyboard 'Settings' as 'UINavigationController'.")
      }
    }
    
    struct signUp {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "SignUp", bundle: _R.hostingBundle) }
      static var signUpFirstStepViewController: SignUpFirstStepViewController? { return instance.instantiateViewControllerWithIdentifier("SignUpFirstStepViewController") as? SignUpFirstStepViewController }
      static var signUpSecondStepViewController: SignUpSecondStepViewController? { return instance.instantiateViewControllerWithIdentifier("SignUpSecondStepViewController") as? SignUpSecondStepViewController }
      
      static func validateImages() {
        assert(UIImage(named: "addAvatar") != nil, "[R.swift] Image named 'addAvatar' is used in storyboard 'SignUp', but couldn't be loaded.")
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'SignUp', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(signUpFirstStepViewController != nil, "[R.swift] ViewController with identifier 'signUpFirstStepViewController' could not be loaded from storyboard 'SignUp' as 'SignUpFirstStepViewController'.")
        assert(signUpSecondStepViewController != nil, "[R.swift] ViewController with identifier 'signUpSecondStepViewController' could not be loaded from storyboard 'SignUp' as 'SignUpSecondStepViewController'.")
      }
    }
    
    struct walkThrough {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "WalkThrough", bundle: _R.hostingBundle) }
      static var walkThrough1: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough1") as? TourScreenViewController }
      static var walkThrough2: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough2") as? TourScreenViewController }
      static var walkThrough3: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough3") as? TourScreenViewController }
      static var walkThrough4: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough4") as? TourScreenViewController }
      static var walkThroughStoryboard: WalkThroughViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThroughStoryboard") as? WalkThroughViewController }
      
      static func validateImages() {
        assert(UIImage(named: "sharingSlide") != nil, "[R.swift] Image named 'sharingSlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "transparencySlide") != nil, "[R.swift] Image named 'transparencySlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "confinesSlide") != nil, "[R.swift] Image named 'confinesSlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "timespentSlide") != nil, "[R.swift] Image named 'timespentSlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "icnNext") != nil, "[R.swift] Image named 'icnNext' is used in storyboard 'WalkThrough', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(walkThrough1 != nil, "[R.swift] ViewController with identifier 'walkThrough1' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
        assert(walkThroughStoryboard != nil, "[R.swift] ViewController with identifier 'walkThroughStoryboard' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughViewController'.")
        assert(walkThrough2 != nil, "[R.swift] ViewController with identifier 'walkThrough2' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
        assert(walkThrough3 != nil, "[R.swift] ViewController with identifier 'walkThrough3' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
        assert(walkThrough4 != nil, "[R.swift] ViewController with identifier 'walkThrough4' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
      }
    }
    
    struct welcome {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Welcome", bundle: _R.hostingBundle) }
      static var welcomeStoryboard: WelcomeViewController? { return instance.instantiateViewControllerWithIdentifier("WelcomeStoryboard") as? WelcomeViewController }
      
      static func validateImages() {
        assert(UIImage(named: "welcomeScreen") != nil, "[R.swift] Image named 'welcomeScreen' is used in storyboard 'Welcome', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(welcomeStoryboard != nil, "[R.swift] ViewController with identifier 'welcomeStoryboard' could not be loaded from storyboard 'Welcome' as 'WelcomeViewController'.")
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.alessioroberto.Yona") }
  
  struct nib {
    struct _YonaCustomDatePickerView: NibResource {
      var instance: UINib { return UINib.init(nibName: "YonaCustomDatePickerView", bundle: _R.hostingBundle) }
      var name: String { return "YonaCustomDatePickerView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaCustomDatePickerView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaCustomDatePickerView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaCustomPickerView: NibResource {
      var instance: UINib { return UINib.init(nibName: "YonaCustomPickerView", bundle: _R.hostingBundle) }
      var name: String { return "YonaCustomPickerView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaCustomPickerView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaCustomPickerView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}