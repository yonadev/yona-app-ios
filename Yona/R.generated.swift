// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
    storyboard.friends.validateImages()
    storyboard.friends.validateViewControllers()
    storyboard.meDashBoard.validateImages()
    storyboard.meDashBoard.validateViewControllers()
    storyboard.dashboard.validateImages()
    storyboard.dashboard.validateViewControllers()
    storyboard.login.validateImages()
    storyboard.login.validateViewControllers()
    storyboard.walkThrough.validateImages()
    storyboard.walkThrough.validateViewControllers()
    storyboard.welcome.validateImages()
    storyboard.welcome.validateViewControllers()
    storyboard.settings.validateImages()
    storyboard.settings.validateViewControllers()
    storyboard.challenges.validateImages()
    storyboard.challenges.validateViewControllers()
    storyboard.vPNFlow.validateImages()
    storyboard.vPNFlow.validateViewControllers()
  }
  
  struct file {
    static var iQKeyboardManagerBundle: NSURL? { return _R.hostingBundle?.URLForResource("IQKeyboardManager", withExtension: "bundle") }
    static var launchScreenStrings: NSURL? { return _R.hostingBundle?.URLForResource("LaunchScreen", withExtension: "strings") }
    static var mainStrings: NSURL? { return _R.hostingBundle?.URLForResource("Main", withExtension: "strings") }
    static var oswaldBoldItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-BoldItalic", withExtension: "ttf") }
    static var oswaldBoldTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Bold", withExtension: "ttf") }
    static var oswaldDemiBoldItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Demi-BoldItalic", withExtension: "ttf") }
    static var oswaldDemiBoldTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-DemiBold", withExtension: "ttf") }
    static var oswaldExtraLightItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Extra-LightItalic", withExtension: "ttf") }
    static var oswaldExtraLightTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-ExtraLight", withExtension: "ttf") }
    static var oswaldHeavyItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-HeavyItalic", withExtension: "ttf") }
    static var oswaldHeavyTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Heavy", withExtension: "ttf") }
    static var oswaldLightItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-LightItalic", withExtension: "ttf") }
    static var oswaldLightTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Light", withExtension: "ttf") }
    static var oswaldMediumItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-MediumItalic", withExtension: "ttf") }
    static var oswaldMediumTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Medium", withExtension: "ttf") }
    static var oswaldRegularItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-RegularItalic", withExtension: "ttf") }
    static var oswaldRegularTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Regular", withExtension: "ttf") }
    static var oswaldStencilTtf: NSURL? { return _R.hostingBundle?.URLForResource("Oswald-Stencil", withExtension: "ttf") }
    static var robotoBlackItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BlackItalic", withExtension: "ttf") }
    static var robotoBlackTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Black", withExtension: "ttf") }
    static var robotoBoldCondensedItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BoldCondensedItalic", withExtension: "ttf") }
    static var robotoBoldCondensedTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BoldCondensed", withExtension: "ttf") }
    static var robotoBoldItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-BoldItalic", withExtension: "ttf") }
    static var robotoBoldTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Bold", withExtension: "ttf") }
    static var robotoCondensedItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-CondensedItalic", withExtension: "ttf") }
    static var robotoCondensedTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Condensed", withExtension: "ttf") }
    static var robotoItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Italic", withExtension: "ttf") }
    static var robotoLightItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-LightItalic", withExtension: "ttf") }
    static var robotoLightTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Light", withExtension: "ttf") }
    static var robotoMediumItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-MediumItalic", withExtension: "ttf") }
    static var robotoMediumTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Medium", withExtension: "ttf") }
    static var robotoRegularTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-Regular", withExtension: "ttf") }
    static var robotoThinItalicTtf: NSURL? { return _R.hostingBundle?.URLForResource("Roboto-ThinItalic", withExtension: "ttf") }
    static var sFUIDisplayBlackOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Black", withExtension: "otf") }
    static var sFUIDisplayBoldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Bold", withExtension: "otf") }
    static var sFUIDisplayHeavyOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Heavy", withExtension: "otf") }
    static var sFUIDisplayLightOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Light", withExtension: "otf") }
    static var sFUIDisplayMediumOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Medium", withExtension: "otf") }
    static var sFUIDisplayRegularOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Regular", withExtension: "otf") }
    static var sFUIDisplaySemiboldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Semibold", withExtension: "otf") }
    static var sFUIDisplayThinOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Thin", withExtension: "otf") }
    static var sFUIDisplayUltralightOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Display-Ultralight", withExtension: "otf") }
    static var sFUITextBoldItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-BoldItalic", withExtension: "otf") }
    static var sFUITextBoldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Bold", withExtension: "otf") }
    static var sFUITextHeavyItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-HeavyItalic", withExtension: "otf") }
    static var sFUITextHeavyOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Heavy", withExtension: "otf") }
    static var sFUITextLightItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-LightItalic", withExtension: "otf") }
    static var sFUITextLightOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Light", withExtension: "otf") }
    static var sFUITextMediumItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-MediumItalic", withExtension: "otf") }
    static var sFUITextMediumOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Medium", withExtension: "otf") }
    static var sFUITextRegularItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-RegularItalic", withExtension: "otf") }
    static var sFUITextRegularOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Regular", withExtension: "otf") }
    static var sFUITextSemiboldItalicOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-SemiboldItalic", withExtension: "otf") }
    static var sFUITextSemiboldOtf: NSURL? { return _R.hostingBundle?.URLForResource("SF-UI-Text-Semibold", withExtension: "otf") }
    static var sVProgressHUDBundle: NSURL? { return _R.hostingBundle?.URLForResource("SVProgressHUD", withExtension: "bundle") }
    static var secretKeysPlist: NSURL? { return _R.hostingBundle?.URLForResource("SecretKeys", withExtension: "plist") }
    static var settingsBundle: NSURL? { return _R.hostingBundle?.URLForResource("Settings", withExtension: "bundle") }
  }
  
  struct font {
    static func oswaldBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Bold", size: size)
    }
    
    static func oswaldBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-BoldItalic", size: size)
    }
    
    static func oswaldDemiBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-DemiBold", size: size)
    }
    
    static func oswaldDemiBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Demi-BoldItalic", size: size)
    }
    
    static func oswaldExtraLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-ExtraLight", size: size)
    }
    
    static func oswaldExtraLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Extra-LightItalic", size: size)
    }
    
    static func oswaldHeavy(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Heavy", size: size)
    }
    
    static func oswaldHeavyItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-HeavyItalic", size: size)
    }
    
    static func oswaldLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Light", size: size)
    }
    
    static func oswaldLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-LightItalic", size: size)
    }
    
    static func oswaldMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Medium", size: size)
    }
    
    static func oswaldMediumItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-MediumItalic", size: size)
    }
    
    static func oswaldRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-Regular", size: size)
    }
    
    static func oswaldRegularItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Oswald-RegularItalic", size: size)
    }
    
    static func oswaldStencilBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "OswaldStencil-Bold", size: size)
    }
    
    static func robotoBlack(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Black", size: size)
    }
    
    static func robotoBlackItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BlackItalic", size: size)
    }
    
    static func robotoBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Bold", size: size)
    }
    
    static func robotoBoldCondensed(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BoldCondensed", size: size)
    }
    
    static func robotoBoldCondensedItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BoldCondensedItalic", size: size)
    }
    
    static func robotoBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-BoldItalic", size: size)
    }
    
    static func robotoCondensed(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Condensed", size: size)
    }
    
    static func robotoCondensedItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-CondensedItalic", size: size)
    }
    
    static func robotoItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Italic", size: size)
    }
    
    static func robotoLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Light", size: size)
    }
    
    static func robotoLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-LightItalic", size: size)
    }
    
    static func robotoMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Medium", size: size)
    }
    
    static func robotoMediumItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-MediumItalic", size: size)
    }
    
    static func robotoRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-Regular", size: size)
    }
    
    static func robotoThinItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "Roboto-ThinItalic", size: size)
    }
    
    static func sFUIDisplayBlack(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Black", size: size)
    }
    
    static func sFUIDisplayBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Bold", size: size)
    }
    
    static func sFUIDisplayHeavy(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Heavy", size: size)
    }
    
    static func sFUIDisplayLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Light", size: size)
    }
    
    static func sFUIDisplayMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Medium", size: size)
    }
    
    static func sFUIDisplayRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Regular", size: size)
    }
    
    static func sFUIDisplaySemibold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Semibold", size: size)
    }
    
    static func sFUIDisplayThin(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Thin", size: size)
    }
    
    static func sFUIDisplayUltralight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIDisplay-Ultralight", size: size)
    }
    
    static func sFUITextBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Bold", size: size)
    }
    
    static func sFUITextBoldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-BoldItalic", size: size)
    }
    
    static func sFUITextHeavy(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Heavy", size: size)
    }
    
    static func sFUITextHeavyItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-HeavyItalic", size: size)
    }
    
    static func sFUITextItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Italic", size: size)
    }
    
    static func sFUITextLight(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Light", size: size)
    }
    
    static func sFUITextLightItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-LightItalic", size: size)
    }
    
    static func sFUITextMedium(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Medium", size: size)
    }
    
    static func sFUITextMediumItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-MediumItalic", size: size)
    }
    
    static func sFUITextRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Regular", size: size)
    }
    
    static func sFUITextSemibold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-Semibold", size: size)
    }
    
    static func sFUITextSemiboldItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "SFUIText-SemiboldItalic", size: size)
    }
  }
  
  struct image {
    static var addAvatar: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "addAvatar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "addAvatar") } }
    static var addCircel: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "addCircel", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "addCircel") } }
    static var adultHappuSmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappuSmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappuSmall") } }
    static var adultHappy: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappy", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappy") } }
    static var adultHappyMedium: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappyMedium", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappyMedium") } }
    static var adultHappySmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultHappySmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultHappySmall") } }
    static var adultReview: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultReview", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultReview") } }
    static var adultReviewMedium: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultReviewMedium", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultReviewMedium") } }
    static var adultReviewSmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultReviewSmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultReviewSmall") } }
    static var adultSad: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultSad", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultSad") } }
    static var adultSadMedium: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultSadMedium", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultSadMedium") } }
    static var adultSadSmall: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "adultSadSmall", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "adultSadSmall") } }
    static var bdgEncouragementBestTime: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "bdgEncouragementBestTime", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "bdgEncouragementBestTime") } }
    static var bdgTenDay: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "bdgTenDay", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "bdgTenDay") } }
    static var brandAssets: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "Brand Assets", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "Brand Assets") } }
    static var confinesSlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "confinesSlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "confinesSlide") } }
    static var first: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "first", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "first") } }
    static var greenNotSelected: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "greenNotSelected", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "greenNotSelected") } }
    static var greenSelected: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "greenSelected", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "greenSelected") } }
    static var iQButtonBarArrowLeft: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "IQButtonBarArrowLeft", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "IQButtonBarArrowLeft") } }
    static var iQButtonBarArrowRight: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "IQButtonBarArrowRight", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "IQButtonBarArrowRight") } }
    static var icnAccountCreated: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAccountCreated", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAccountCreated") } }
    static var icnAdd: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAdd", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAdd") } }
    static var icnAddPicture: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAddPicture", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAddPicture") } }
    static var icnAvatar: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnAvatar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnAvatar") } }
    static var icnBack: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnBack", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnBack") } }
    static var icnChallengeActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeActive") } }
    static var icnChallengeNogo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeNogo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeNogo") } }
    static var icnChallengeTimebucket: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeTimebucket", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeTimebucket") } }
    static var icnChallengeTimezone: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallengeTimezone", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallengeTimezone") } }
    static var icnChallenges: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnChallenges", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnChallenges") } }
    static var icnComment: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnComment", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnComment") } }
    static var icnCommentBar: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnCommentBar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnCommentBar") } }
    static var icnCreate: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnCreate", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnCreate") } }
    static var icnDateBack: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnDateBack", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnDateBack") } }
    static var icnDateForward: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnDateForward", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnDateForward") } }
    static var icnDelete: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnDelete", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnDelete") } }
    static var icnEdit: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnEdit", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnEdit") } }
    static var icnFriends: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnFriends", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnFriends") } }
    static var icnFriendsActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnFriendsActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnFriendsActive") } }
    static var icnMail: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMail", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMail") } }
    static var icnMe: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMe", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMe") } }
    static var icnMeActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMeActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMeActive") } }
    static var icnMobile: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMobile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMobile") } }
    static var icnMoon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnMoon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnMoon") } }
    static var icnName: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnName", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnName") } }
    static var icnNext: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNext", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNext") } }
    static var icnNickname: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNickname", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNickname") } }
    static var icnNo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNo") } }
    static var icnNotifications: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnNotifications", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnNotifications") } }
    static var icnOk: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnOk", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnOk") } }
    static var icnReminder: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnReminder", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnReminder") } }
    static var icnSecure: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSecure", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSecure") } }
    static var icnSettings: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSettings", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSettings") } }
    static var icnSettingsActive: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSettingsActive", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSettingsActive") } }
    static var icnSun: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnSun", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnSun") } }
    static var icnTrash: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnTrash", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnTrash") } }
    static var icnY: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icnY", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icnY") } }
    static var icn_vpn_Alert: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icn_vpn_Alert", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icn_vpn_Alert") } }
    static var icn_vpn_OpenVPN: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icn_vpn_OpenVPN", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icn_vpn_OpenVPN") } }
    static var icn_vpn_Settings: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icn_vpn_Settings", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icn_vpn_Settings") } }
    static var icn_vpn_Yona: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "icn_vpn_Yona", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "icn_vpn_Yona") } }
    static var iconMoon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "iconMoon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "iconMoon") } }
    static var imgBorders: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgBorders", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgBorders") } }
    static var imgShare: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgShare", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgShare") } }
    static var imgTime: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgTime", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgTime") } }
    static var imgTransparantie: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "imgTransparantie", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "imgTransparantie") } }
    static var intro1_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro1_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro1_1") } }
    static var intro1_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro1_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro1_2") } }
    static var intro2_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro2_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro2_1") } }
    static var intro2_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro2_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro2_2") } }
    static var intro3_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro3_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro3_1") } }
    static var intro3_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro3_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro3_2") } }
    static var intro_setting_1_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_1_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_1_1") } }
    static var intro_setting_1_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_1_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_1_2") } }
    static var intro_setting_2_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_2_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_2_1") } }
    static var intro_setting_2_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_2_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_2_2") } }
    static var intro_setting_3_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_3_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_3_1") } }
    static var intro_setting_3_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_3_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_3_2") } }
    static var intro_setting_4_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_4_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_4_1") } }
    static var intro_setting_4_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "intro_setting_4_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "intro_setting_4_2") } }
    static var second: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "second", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "second") } }
    static var sharingSlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "sharingSlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "sharingSlide") } }
    static var timespentSlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timespentSlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timespentSlide") } }
    static var transparencySlide: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "transparencySlide", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "transparencySlide") } }
    static var walkthroughPage: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "walkthroughPage", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "walkthroughPage") } }
    static var welcomeScreen: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "welcomeScreen", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "welcomeScreen") } }
    static var yonaLogo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "yonaLogo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "yonaLogo") } }
  }
  
  struct nib {
    static var commentControlCell: _R.nib._CommentControlCell { return _R.nib._CommentControlCell() }
    static var commentTableHeader: _R.nib._CommentTableHeader { return _R.nib._CommentTableHeader() }
    static var noGoCell: _R.nib._NoGoCell { return _R.nib._NoGoCell() }
    static var noGoCellFriends: _R.nib._NoGoCellFriends { return _R.nib._NoGoCellFriends() }
    static var replyToComment: _R.nib._ReplyToComment { return _R.nib._ReplyToComment() }
    static var sendCommentControl: _R.nib._SendCommentControl { return _R.nib._SendCommentControl() }
    static var spreadCell: _R.nib._SpreadCell { return _R.nib._SpreadCell() }
    static var timeBucketControlCell: _R.nib._TimeBucketControlCell { return _R.nib._TimeBucketControlCell() }
    static var timeLineHeaderCell: _R.nib._TimeLineHeaderCell { return _R.nib._TimeLineHeaderCell() }
    static var timeLineNoGoCell: _R.nib._TimeLineNoGoCell { return _R.nib._TimeLineNoGoCell() }
    static var timeLineTimeBucketCell: _R.nib._TimeLineTimeBucketCell { return _R.nib._TimeLineTimeBucketCell() }
    static var timeLineTimeZoneCell: _R.nib._TimeLineTimeZoneCell { return _R.nib._TimeLineTimeZoneCell() }
    static var timeZoneControlCell: _R.nib._TimeZoneControlCell { return _R.nib._TimeZoneControlCell() }
    static var weekScoreControlCell: _R.nib._WeekScoreControlCell { return _R.nib._WeekScoreControlCell() }
    static var yonaButtonTableViewCell: _R.nib._YonaButtonTableViewCell { return _R.nib._YonaButtonTableViewCell() }
    static var yonaButtonsTableHeaderView: _R.nib._YonaButtonsTableHeaderView { return _R.nib._YonaButtonsTableHeaderView() }
    static var yonaCustomDatePickerView: _R.nib._YonaCustomDatePickerView { return _R.nib._YonaCustomDatePickerView() }
    static var yonaCustomPickerView: _R.nib._YonaCustomPickerView { return _R.nib._YonaCustomPickerView() }
    static var yonaDefaultTableHeaderView: _R.nib._YonaDefaultTableHeaderView { return _R.nib._YonaDefaultTableHeaderView() }
    static var yonaTwoButtonTableViewCell: _R.nib._YonaTwoButtonTableViewCell { return _R.nib._YonaTwoButtonTableViewCell() }
    static var yonaUserDisplayTableViewCell: _R.nib._YonaUserDisplayTableViewCell { return _R.nib._YonaUserDisplayTableViewCell() }
    static var yonaUserHeaderWithTwoTabTableViewCell: _R.nib._YonaUserHeaderWithTwoTabTableViewCell { return _R.nib._YonaUserHeaderWithTwoTabTableViewCell() }
    static var yonaUserTableViewCell: _R.nib._YonaUserTableViewCell { return _R.nib._YonaUserTableViewCell() }
  }
  
  struct reuseIdentifier {
    static var commentControlCell: ReuseIdentifier<CommentControlCell> { return ReuseIdentifier(identifier: "CommentControlCell") }
    static var replyToComment: ReuseIdentifier<ReplyToComment> { return ReuseIdentifier(identifier: "ReplyToComment") }
    static var spreadCell: ReuseIdentifier<SpreadCell> { return ReuseIdentifier(identifier: "SpreadCell") }
    static var timeBucketControlCell: ReuseIdentifier<TimeBucketControlCell> { return ReuseIdentifier(identifier: "TimeBucketControlCell") }
    static var timeLineHeaderCell: ReuseIdentifier<TimeLineHeaderCell> { return ReuseIdentifier(identifier: "TimeLineHeaderCell") }
    static var timeLineNoGoCell: ReuseIdentifier<TimeLineNoGoCell> { return ReuseIdentifier(identifier: "TimeLineNoGoCell") }
    static var timeLineTimeBucketCell: ReuseIdentifier<TimeLineTimeBucketCell> { return ReuseIdentifier(identifier: "TimeLineTimeBucketCell") }
    static var timeLineTimeZoneCell: ReuseIdentifier<TimeLineTimeZoneCell> { return ReuseIdentifier(identifier: "TimeLineTimeZoneCell") }
    static var timeZoneCell: ReuseIdentifier<TimeZoneTableViewCell> { return ReuseIdentifier(identifier: "timeZoneCell") }
    static var timeZoneControlCell: ReuseIdentifier<TimeZoneControlCell> { return ReuseIdentifier(identifier: "TimeZoneControlCell") }
    static var weekScoreControlCell: ReuseIdentifier<WeekScoreControlCell> { return ReuseIdentifier(identifier: "WeekScoreControlCell") }
    static var yonaButtonTableViewCell: ReuseIdentifier<YonaButtonTableViewCell> { return ReuseIdentifier(identifier: "YonaButtonTableViewCell") }
    static var yonaNotificationsAccessTextTableViewCell: ReuseIdentifier<YonaNotificationsAccessTextTableViewCell> { return ReuseIdentifier(identifier: "YonaNotificationsAccessTextTableViewCell") }
    static var yonaNotificationsAccessTypeTableViewCell: ReuseIdentifier<YonaNotificationsAccessTypeTableViewCell> { return ReuseIdentifier(identifier: "YonaNotificationsAccessTypeTableViewCell") }
    static var yonaTwoButtonTableViewCell: ReuseIdentifier<YonaTwoButtonTableViewCell> { return ReuseIdentifier(identifier: "YonaTwoButtonTableViewCell") }
    static var yonaUserDisplayTableViewCell: ReuseIdentifier<YonaUserDisplayTableViewCell> { return ReuseIdentifier(identifier: "YonaUserDisplayTableViewCell") }
    static var yonaUserHeaderWithTwoTabTableViewCell: ReuseIdentifier<YonaUserHeaderWithTwoTabTableViewCell> { return ReuseIdentifier(identifier: "YonaUserHeaderWithTwoTabTableViewCell") }
    static var yonaUserTableViewCell: ReuseIdentifier<YonaUserTableViewCell> { return ReuseIdentifier(identifier: "YonaUserTableViewCell") }
  }
  
  struct segue {
    struct adminOverrideValidationVC {
      static var transToSetPincode: StoryboardSegueIdentifier<UIStoryboardSegue, AdminOverrideValidationVC, SetPasscodeViewController> { return StoryboardSegueIdentifier(identifier: "transToSetPincode") }
    }
    
    struct confirmMobileValidationVC {
      static var transToSetPincode: StoryboardSegueIdentifier<UIStoryboardSegue, ConfirmMobileValidationVC, SetPasscodeViewController> { return StoryboardSegueIdentifier(identifier: "transToSetPincode") }
    }
    
    struct friendsDayViewController {
      static var showFriendProfile: StoryboardSegueIdentifier<UIStoryboardSegue, FriendsDayViewController, FriendsProfileViewController> { return StoryboardSegueIdentifier(identifier: "showFriendProfile") }
      static var showFriendsDetailDay: StoryboardSegueIdentifier<UIStoryboardSegue, FriendsDayViewController, FriendsDayDetailViewController> { return StoryboardSegueIdentifier(identifier: "showFriendsDetailDay") }
      static var showFriendsDetailWeek: StoryboardSegueIdentifier<UIStoryboardSegue, FriendsDayViewController, FriendsWeekDetailWeekController> { return StoryboardSegueIdentifier(identifier: "showFriendsDetailWeek") }
    }
    
    struct friendsProfileMasterView {
      static var addFriendsSegue: StoryboardSegueIdentifier<UIStoryboardSegue, FriendsProfileMasterView, AddFriendsViewController> { return StoryboardSegueIdentifier(identifier: "addFriendsSegue") }
      static var showFriendDetails: StoryboardSegueIdentifier<UIStoryboardSegue, FriendsProfileMasterView, FriendsDayViewController> { return StoryboardSegueIdentifier(identifier: "showFriendDetails") }
      static var showFriendsDetailDay: StoryboardSegueIdentifier<UIStoryboardSegue, FriendsProfileMasterView, FriendsDayDetailViewController> { return StoryboardSegueIdentifier(identifier: "showFriendsDetailDay") }
    }
    
    struct loginViewController {
      static var transToPasscode: StoryboardSegueIdentifier<UIStoryboardSegue, LoginViewController, SetPasscodeViewController> { return StoryboardSegueIdentifier(identifier: "transToPasscode") }
      static var transToPinResetValidation: StoryboardSegueIdentifier<UIStoryboardSegue, LoginViewController, PinResetValidationVC> { return StoryboardSegueIdentifier(identifier: "transToPinResetValidation") }
    }
    
    struct meDashBoardMainViewController {
      static var showDayDetail: StoryboardSegueIdentifier<UIStoryboardSegue, MeDashBoardMainViewController, MeDayDetailViewController> { return StoryboardSegueIdentifier(identifier: "showDayDetail") }
      static var showProfile: StoryboardSegueIdentifier<UIStoryboardSegue, MeDashBoardMainViewController, YonaUserProfileViewController> { return StoryboardSegueIdentifier(identifier: "showProfile") }
      static var showWeekDetail: StoryboardSegueIdentifier<UIStoryboardSegue, MeDashBoardMainViewController, MeWeekDetailWeekViewController> { return StoryboardSegueIdentifier(identifier: "showWeekDetail") }
    }
    
    struct notificationsViewController {
      static var showAcceptFriend: StoryboardSegueIdentifier<UIStoryboardSegue, NotificationsViewController, YonaNotificationAcceptFriendRequestViewController> { return StoryboardSegueIdentifier(identifier: "showAcceptFriend") }
      static var showDayDetailMessage: StoryboardSegueIdentifier<UIStoryboardSegue, NotificationsViewController, MeDayDetailViewController> { return StoryboardSegueIdentifier(identifier: "showDayDetailMessage") }
      static var showWeekDetailMessage: StoryboardSegueIdentifier<UIStoryboardSegue, NotificationsViewController, MeWeekDetailWeekViewController> { return StoryboardSegueIdentifier(identifier: "showWeekDetailMessage") }
    }
    
    struct pinResetValidationVC {
      static var transToSetPincode: StoryboardSegueIdentifier<UIStoryboardSegue, PinResetValidationVC, SetPasscodeViewController> { return StoryboardSegueIdentifier(identifier: "transToSetPincode") }
    }
    
    struct setPasscodeViewController {
      static var transToConfirmPincode: StoryboardSegueIdentifier<UIStoryboardSegue, SetPasscodeViewController, ConfirmPasscodeViewController> { return StoryboardSegueIdentifier(identifier: "transToConfirmPincode") }
    }
    
    struct settingsViewController {
      static var privacyStatementSegue: StoryboardSegueIdentifier<UIStoryboardSegue, SettingsViewController, PrivacyStatementVC> { return StoryboardSegueIdentifier(identifier: "PrivacyStatementSegue") }
    }
    
    struct signUpFirstStepViewController {
      static var signUpSecondStepViewController: StoryboardSegueIdentifier<UIStoryboardSegue, SignUpFirstStepViewController, SignUpSecondStepViewController> { return StoryboardSegueIdentifier(identifier: "SignUpSecondStepViewController") }
    }
    
    struct timeBucketChallenges {
      static var budgetChallengeSegue: StoryboardSegueIdentifier<UIStoryboardSegue, TimeBucketChallenges, TimeFrameBudgetChallengeViewController> { return StoryboardSegueIdentifier(identifier: "BudgetChallengeSegue") }
      static var noGoChallengeSegue: StoryboardSegueIdentifier<UIStoryboardSegue, TimeBucketChallenges, TimeFrameNoGoChallengeViewController> { return StoryboardSegueIdentifier(identifier: "NoGoChallengeSegue") }
      static var timezoneChallengeSegue: StoryboardSegueIdentifier<UIStoryboardSegue, TimeBucketChallenges, TimeFrameTimeZoneChallengeViewController> { return StoryboardSegueIdentifier(identifier: "TimezoneChallengeSegue") }
    }
    
    struct uINavigationController {
      static var transToAdminOverrideValidation: StoryboardSegueIdentifier<UIStoryboardSegue, UINavigationController, AdminOverrideValidationVC> { return StoryboardSegueIdentifier(identifier: "transToAdminOverrideValidation") }
    }
    
    struct welcomeViewController {
      static var signUpFirstStepViewController: StoryboardSegueIdentifier<UIStoryboardSegue, WelcomeViewController, SignUpFirstStepViewController> { return StoryboardSegueIdentifier(identifier: "SignUpFirstStepViewController") }
    }
    
    struct yonaVPNFlowMainViewController {
      static var mobileInstruction: StoryboardSegueIdentifier<UIStoryboardSegue, YonaVPNFlowMainViewController, YonaVPNFlowInstructionsMobileConfigViewController> { return StoryboardSegueIdentifier(identifier: "mobileInstruction") }
      static var showVPNInstructions: StoryboardSegueIdentifier<UIStoryboardSegue, YonaVPNFlowMainViewController, YonaVPNFlowInstructionsVPNViewController> { return StoryboardSegueIdentifier(identifier: "showVPNInstructions") }
    }
  }
  
  struct storyboard {
    struct challenges {
      static var initialViewController: TimeBucketChallenges? { return instance.instantiateInitialViewController() as? TimeBucketChallenges }
      static var instance: UIStoryboard { return UIStoryboard(name: "Challenges", bundle: _R.hostingBundle) }
      static var timeFrameBudgetChallengeStoryboard: TimeFrameBudgetChallengeViewController? { return instance.instantiateViewControllerWithIdentifier("TimeFrameBudgetChallengeStoryboard") as? TimeFrameBudgetChallengeViewController }
      static var timeFrameNoGoChallengeStoryboard: TimeFrameNoGoChallengeViewController? { return instance.instantiateViewControllerWithIdentifier("TimeFrameNoGoChallengeStoryboard") as? TimeFrameNoGoChallengeViewController }
      static var timeFrameTimeZoneChallengeStoryboard: TimeFrameTimeZoneChallengeViewController? { return instance.instantiateViewControllerWithIdentifier("TimeFrameTimeZoneChallengeStoryboard") as? TimeFrameTimeZoneChallengeViewController }
      
      static func validateImages() {
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeTimebucket") != nil, "[R.swift] Image named 'icnChallengeTimebucket' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeTimezone") != nil, "[R.swift] Image named 'icnChallengeTimezone' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnTrash") != nil, "[R.swift] Image named 'icnTrash' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "addCircel") != nil, "[R.swift] Image named 'addCircel' is used in storyboard 'Challenges', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeNogo") != nil, "[R.swift] Image named 'icnChallengeNogo' is used in storyboard 'Challenges', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(timeFrameTimeZoneChallengeStoryboard != nil, "[R.swift] ViewController with identifier 'timeFrameTimeZoneChallengeStoryboard' could not be loaded from storyboard 'Challenges' as 'TimeFrameTimeZoneChallengeViewController'.")
        assert(timeFrameBudgetChallengeStoryboard != nil, "[R.swift] ViewController with identifier 'timeFrameBudgetChallengeStoryboard' could not be loaded from storyboard 'Challenges' as 'TimeFrameBudgetChallengeViewController'.")
        assert(timeFrameNoGoChallengeStoryboard != nil, "[R.swift] ViewController with identifier 'timeFrameNoGoChallengeStoryboard' could not be loaded from storyboard 'Challenges' as 'TimeFrameNoGoChallengeViewController'.")
      }
    }
    
    struct dashboard {
      static var initialViewController: BaseTabViewController? { return instance.instantiateInitialViewController() as? BaseTabViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Dashboard", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "icnSettings") != nil, "[R.swift] Image named 'icnSettings' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnFriends") != nil, "[R.swift] Image named 'icnFriends' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnMeActive") != nil, "[R.swift] Image named 'icnMeActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnChallenges") != nil, "[R.swift] Image named 'icnChallenges' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnSettingsActive") != nil, "[R.swift] Image named 'icnSettingsActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnChallengeActive") != nil, "[R.swift] Image named 'icnChallengeActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnFriendsActive") != nil, "[R.swift] Image named 'icnFriendsActive' is used in storyboard 'Dashboard', but couldn't be loaded.")
        assert(UIImage(named: "icnMe") != nil, "[R.swift] Image named 'icnMe' is used in storyboard 'Dashboard', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct friends {
      static var addFriendsStoryboard: AddFriendsViewController? { return instance.instantiateViewControllerWithIdentifier("AddFriendsStoryboard") as? AddFriendsViewController }
      static var friendsDayDetailViewController: FriendsDayDetailViewController? { return instance.instantiateViewControllerWithIdentifier("FriendsDayDetailViewController") as? FriendsDayDetailViewController }
      static var friendsDayViewController: FriendsDayViewController? { return instance.instantiateViewControllerWithIdentifier("FriendsDayViewController") as? FriendsDayViewController }
      static var friendsProfileViewController: FriendsProfileViewController? { return instance.instantiateViewControllerWithIdentifier("FriendsProfileViewController") as? FriendsProfileViewController }
      static var friendsWeekDetailWeekController: FriendsWeekDetailWeekController? { return instance.instantiateViewControllerWithIdentifier("FriendsWeekDetailWeekController") as? FriendsWeekDetailWeekController }
      static var initialViewController: FriendsProfileMasterView? { return instance.instantiateInitialViewController() as? FriendsProfileMasterView }
      static var instance: UIStoryboard { return UIStoryboard(name: "Friends", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "icnAdd") != nil, "[R.swift] Image named 'icnAdd' is used in storyboard 'Friends', but couldn't be loaded.")
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'Friends', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(addFriendsStoryboard != nil, "[R.swift] ViewController with identifier 'addFriendsStoryboard' could not be loaded from storyboard 'Friends' as 'AddFriendsViewController'.")
        assert(friendsDayViewController != nil, "[R.swift] ViewController with identifier 'friendsDayViewController' could not be loaded from storyboard 'Friends' as 'FriendsDayViewController'.")
        assert(friendsProfileViewController != nil, "[R.swift] ViewController with identifier 'friendsProfileViewController' could not be loaded from storyboard 'Friends' as 'FriendsProfileViewController'.")
        assert(friendsDayDetailViewController != nil, "[R.swift] ViewController with identifier 'friendsDayDetailViewController' could not be loaded from storyboard 'Friends' as 'FriendsDayDetailViewController'.")
        assert(friendsWeekDetailWeekController != nil, "[R.swift] ViewController with identifier 'friendsWeekDetailWeekController' could not be loaded from storyboard 'Friends' as 'FriendsWeekDetailWeekController'.")
      }
    }
    
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct login {
      static var adminOverrideValidationViewController: AdminOverrideValidationVC? { return instance.instantiateViewControllerWithIdentifier("adminOverrideValidationViewController") as? AdminOverrideValidationVC }
      static var confirmPasscodeViewController: ConfirmPasscodeViewController? { return instance.instantiateViewControllerWithIdentifier("ConfirmPasscodeViewController") as? ConfirmPasscodeViewController }
      static var confirmPinValidationViewController: ConfirmMobileValidationVC? { return instance.instantiateViewControllerWithIdentifier("confirmPinValidationViewController") as? ConfirmMobileValidationVC }
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Login", bundle: _R.hostingBundle) }
      static var loginViewController: LoginViewController? { return instance.instantiateViewControllerWithIdentifier("LoginViewController") as? LoginViewController }
      static var passcodeViewController: SetPasscodeViewController? { return instance.instantiateViewControllerWithIdentifier("PasscodeViewController") as? SetPasscodeViewController }
      static var pinResetValidationController: PinResetValidationVC? { return instance.instantiateViewControllerWithIdentifier("pinResetValidationController") as? PinResetValidationVC }
      
      static func validateImages() {
        assert(UIImage(named: "icnSecure") != nil, "[R.swift] Image named 'icnSecure' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "icnY") != nil, "[R.swift] Image named 'icnY' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "icnAccountCreated") != nil, "[R.swift] Image named 'icnAccountCreated' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "addAvatar") != nil, "[R.swift] Image named 'addAvatar' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'Login', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(loginViewController != nil, "[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.")
        assert(confirmPasscodeViewController != nil, "[R.swift] ViewController with identifier 'confirmPasscodeViewController' could not be loaded from storyboard 'Login' as 'ConfirmPasscodeViewController'.")
        assert(passcodeViewController != nil, "[R.swift] ViewController with identifier 'passcodeViewController' could not be loaded from storyboard 'Login' as 'SetPasscodeViewController'.")
        assert(confirmPinValidationViewController != nil, "[R.swift] ViewController with identifier 'confirmPinValidationViewController' could not be loaded from storyboard 'Login' as 'ConfirmMobileValidationVC'.")
        assert(pinResetValidationController != nil, "[R.swift] ViewController with identifier 'pinResetValidationController' could not be loaded from storyboard 'Login' as 'PinResetValidationVC'.")
        assert(adminOverrideValidationViewController != nil, "[R.swift] ViewController with identifier 'adminOverrideValidationViewController' could not be loaded from storyboard 'Login' as 'AdminOverrideValidationVC'.")
      }
    }
    
    struct main {
      static var initialViewController: UITabBarController? { return instance.instantiateInitialViewController() as? UITabBarController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "first") != nil, "[R.swift] Image named 'first' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "second") != nil, "[R.swift] Image named 'second' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct meDashBoard {
      static var initialViewController: MeDashBoardMainViewController? { return instance.instantiateInitialViewController() as? MeDashBoardMainViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "MeDashBoard", bundle: _R.hostingBundle) }
      static var profileStoryboard: YonaUserProfileViewController? { return instance.instantiateViewControllerWithIdentifier("ProfileStoryboard") as? YonaUserProfileViewController }
      static var profileViewController: MeDashBoardMainViewController? { return instance.instantiateViewControllerWithIdentifier("ProfileViewController") as? MeDashBoardMainViewController }
      static var yonaNotificationAcceptFriendRequestViewController: YonaNotificationAcceptFriendRequestViewController? { return instance.instantiateViewControllerWithIdentifier("YonaNotificationAcceptFriendRequestViewController") as? YonaNotificationAcceptFriendRequestViewController }
      
      static func validateImages() {
        assert(UIImage(named: "icnEdit") != nil, "[R.swift] Image named 'icnEdit' is used in storyboard 'MeDashBoard', but couldn't be loaded.")
        assert(UIImage(named: "icnReminder") != nil, "[R.swift] Image named 'icnReminder' is used in storyboard 'MeDashBoard', but couldn't be loaded.")
        assert(UIImage(named: "icnBack") != nil, "[R.swift] Image named 'icnBack' is used in storyboard 'MeDashBoard', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(profileViewController != nil, "[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'MeDashBoard' as 'MeDashBoardMainViewController'.")
        assert(profileStoryboard != nil, "[R.swift] ViewController with identifier 'profileStoryboard' could not be loaded from storyboard 'MeDashBoard' as 'YonaUserProfileViewController'.")
        assert(yonaNotificationAcceptFriendRequestViewController != nil, "[R.swift] ViewController with identifier 'yonaNotificationAcceptFriendRequestViewController' could not be loaded from storyboard 'MeDashBoard' as 'YonaNotificationAcceptFriendRequestViewController'.")
      }
    }
    
    struct settings {
      static var initialViewController: SettingsViewController? { return instance.instantiateInitialViewController() as? SettingsViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Settings", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct vPNFlow {
      static var instance: UIStoryboard { return UIStoryboard(name: "VPNFlow", bundle: _R.hostingBundle) }
      static var vpnNavigationController: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("vpnNavigationController") as? UINavigationController }
      static var yonaInstructionMobilePage1: YonaInstructionMobilePage1? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionMobilePage1") as? YonaInstructionMobilePage1 }
      static var yonaInstructionMobilePage2: YonaInstructionMobilePage2? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionMobilePage2") as? YonaInstructionMobilePage2 }
      static var yonaInstructionMobilePage3: YonaInstructionMobilePage3? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionMobilePage3") as? YonaInstructionMobilePage3 }
      static var yonaInstructionMobilePage4: YonaInstructionMobilePage4? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionMobilePage4") as? YonaInstructionMobilePage4 }
      static var yonaInstructionPage1: YonaInstructionPage1? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionPage1") as? YonaInstructionPage1 }
      static var yonaInstructionPage2: YonaInstructionPage2? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionPage2") as? YonaInstructionPage2 }
      static var yonaInstructionPage3: YonaInstructionPage3? { return instance.instantiateViewControllerWithIdentifier("YonaInstructionPage3") as? YonaInstructionPage3 }
      static var yonaVPNFlowInstructionsMobileConfigViewController: YonaVPNFlowInstructionsMobileConfigViewController? { return instance.instantiateViewControllerWithIdentifier("YonaVPNFlowInstructionsMobileConfigViewController") as? YonaVPNFlowInstructionsMobileConfigViewController }
      static var yonaVPNFlowInstructionsVPNViewController: YonaVPNFlowInstructionsVPNViewController? { return instance.instantiateViewControllerWithIdentifier("YonaVPNFlowInstructionsVPNViewController") as? YonaVPNFlowInstructionsVPNViewController }
      static var yonaVPNFlowMainViewController: YonaVPNFlowMainViewController? { return instance.instantiateViewControllerWithIdentifier("YonaVPNFlowMainViewController") as? YonaVPNFlowMainViewController }
      
      static func validateImages() {
        assert(UIImage(named: "intro_setting_3_1") != nil, "[R.swift] Image named 'intro_setting_3_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro1_2") != nil, "[R.swift] Image named 'intro1_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro3_1") != nil, "[R.swift] Image named 'intro3_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro3_2") != nil, "[R.swift] Image named 'intro3_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_2_2") != nil, "[R.swift] Image named 'intro_setting_2_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_2_1") != nil, "[R.swift] Image named 'intro_setting_2_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "icn_vpn_Alert") != nil, "[R.swift] Image named 'icn_vpn_Alert' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro2_2") != nil, "[R.swift] Image named 'intro2_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_1_2") != nil, "[R.swift] Image named 'intro_setting_1_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_3_2") != nil, "[R.swift] Image named 'intro_setting_3_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_4_2") != nil, "[R.swift] Image named 'intro_setting_4_2' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro1_1") != nil, "[R.swift] Image named 'intro1_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_1_1") != nil, "[R.swift] Image named 'intro_setting_1_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro2_1") != nil, "[R.swift] Image named 'intro2_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
        assert(UIImage(named: "intro_setting_4_1") != nil, "[R.swift] Image named 'intro_setting_4_1' is used in storyboard 'VPNFlow', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(vpnNavigationController != nil, "[R.swift] ViewController with identifier 'vpnNavigationController' could not be loaded from storyboard 'VPNFlow' as 'UINavigationController'.")
        assert(yonaVPNFlowMainViewController != nil, "[R.swift] ViewController with identifier 'yonaVPNFlowMainViewController' could not be loaded from storyboard 'VPNFlow' as 'YonaVPNFlowMainViewController'.")
        assert(yonaVPNFlowInstructionsVPNViewController != nil, "[R.swift] ViewController with identifier 'yonaVPNFlowInstructionsVPNViewController' could not be loaded from storyboard 'VPNFlow' as 'YonaVPNFlowInstructionsVPNViewController'.")
        assert(yonaInstructionPage1 != nil, "[R.swift] ViewController with identifier 'yonaInstructionPage1' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionPage1'.")
        assert(yonaInstructionPage2 != nil, "[R.swift] ViewController with identifier 'yonaInstructionPage2' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionPage2'.")
        assert(yonaInstructionPage3 != nil, "[R.swift] ViewController with identifier 'yonaInstructionPage3' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionPage3'.")
        assert(yonaVPNFlowInstructionsMobileConfigViewController != nil, "[R.swift] ViewController with identifier 'yonaVPNFlowInstructionsMobileConfigViewController' could not be loaded from storyboard 'VPNFlow' as 'YonaVPNFlowInstructionsMobileConfigViewController'.")
        assert(yonaInstructionMobilePage1 != nil, "[R.swift] ViewController with identifier 'yonaInstructionMobilePage1' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionMobilePage1'.")
        assert(yonaInstructionMobilePage2 != nil, "[R.swift] ViewController with identifier 'yonaInstructionMobilePage2' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionMobilePage2'.")
        assert(yonaInstructionMobilePage3 != nil, "[R.swift] ViewController with identifier 'yonaInstructionMobilePage3' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionMobilePage3'.")
        assert(yonaInstructionMobilePage4 != nil, "[R.swift] ViewController with identifier 'yonaInstructionMobilePage4' could not be loaded from storyboard 'VPNFlow' as 'YonaInstructionMobilePage4'.")
      }
    }
    
    struct walkThrough {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "WalkThrough", bundle: _R.hostingBundle) }
      static var walkThrough1: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough1") as? TourScreenViewController }
      static var walkThrough2: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough2") as? TourScreenViewController }
      static var walkThrough3: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough3") as? TourScreenViewController }
      static var walkThrough4: TourScreenViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThrough4") as? TourScreenViewController }
      static var walkThroughViewController: WalkThroughViewController? { return instance.instantiateViewControllerWithIdentifier("WalkThroughViewController") as? WalkThroughViewController }
      
      static func validateImages() {
        assert(UIImage(named: "sharingSlide") != nil, "[R.swift] Image named 'sharingSlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "transparencySlide") != nil, "[R.swift] Image named 'transparencySlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "confinesSlide") != nil, "[R.swift] Image named 'confinesSlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "timespentSlide") != nil, "[R.swift] Image named 'timespentSlide' is used in storyboard 'WalkThrough', but couldn't be loaded.")
        assert(UIImage(named: "icnNext") != nil, "[R.swift] Image named 'icnNext' is used in storyboard 'WalkThrough', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(walkThrough1 != nil, "[R.swift] ViewController with identifier 'walkThrough1' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
        assert(walkThroughViewController != nil, "[R.swift] ViewController with identifier 'walkThroughViewController' could not be loaded from storyboard 'WalkThrough' as 'WalkThroughViewController'.")
        assert(walkThrough2 != nil, "[R.swift] ViewController with identifier 'walkThrough2' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
        assert(walkThrough3 != nil, "[R.swift] ViewController with identifier 'walkThrough3' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
        assert(walkThrough4 != nil, "[R.swift] ViewController with identifier 'walkThrough4' could not be loaded from storyboard 'WalkThrough' as 'TourScreenViewController'.")
      }
    }
    
    struct welcome {
      static var addDeviceStoryboard: AddDeviceViewController? { return instance.instantiateViewControllerWithIdentifier("AddDeviceStoryboard") as? AddDeviceViewController }
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Welcome", bundle: _R.hostingBundle) }
      static var signUpFirstStepViewController: SignUpFirstStepViewController? { return instance.instantiateViewControllerWithIdentifier("SignUpFirstStepViewController") as? SignUpFirstStepViewController }
      static var signUpSecondStepViewController: SignUpSecondStepViewController? { return instance.instantiateViewControllerWithIdentifier("SignUpSecondStepViewController") as? SignUpSecondStepViewController }
      static var welcomeViewController: WelcomeViewController? { return instance.instantiateViewControllerWithIdentifier("WelcomeViewController") as? WelcomeViewController }
      
      static func validateImages() {
        assert(UIImage(named: "welcomeScreen") != nil, "[R.swift] Image named 'welcomeScreen' is used in storyboard 'Welcome', but couldn't be loaded.")
        assert(UIImage(named: "addAvatar") != nil, "[R.swift] Image named 'addAvatar' is used in storyboard 'Welcome', but couldn't be loaded.")
        assert(UIImage(named: "icnAvatar") != nil, "[R.swift] Image named 'icnAvatar' is used in storyboard 'Welcome', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(welcomeViewController != nil, "[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'Welcome' as 'WelcomeViewController'.")
        assert(signUpFirstStepViewController != nil, "[R.swift] ViewController with identifier 'signUpFirstStepViewController' could not be loaded from storyboard 'Welcome' as 'SignUpFirstStepViewController'.")
        assert(signUpSecondStepViewController != nil, "[R.swift] ViewController with identifier 'signUpSecondStepViewController' could not be loaded from storyboard 'Welcome' as 'SignUpSecondStepViewController'.")
        assert(addDeviceStoryboard != nil, "[R.swift] ViewController with identifier 'addDeviceStoryboard' could not be loaded from storyboard 'Welcome' as 'AddDeviceViewController'.")
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.alessioroberto.Yona") }
  
  struct nib {
    struct _CommentControlCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "CommentControlCell", bundle: _R.hostingBundle) }
      var name: String { return "CommentControlCell" }
      var reuseIdentifier: ReuseIdentifier<CommentControlCell> { return ReuseIdentifier(identifier: "CommentControlCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> CommentControlCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CommentControlCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _CommentTableHeader: NibResource {
      var instance: UINib { return UINib.init(nibName: "CommentTableHeader", bundle: _R.hostingBundle) }
      var name: String { return "CommentTableHeader" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> CommentTableHeader? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CommentTableHeader
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _NoGoCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "NoGoCell", bundle: _R.hostingBundle) }
      var name: String { return "NoGoCell" }
      var reuseIdentifier: ReuseIdentifier<NoGoCell> { return ReuseIdentifier(identifier: "NoGoCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> NoGoCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? NoGoCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _NoGoCellFriends: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "NoGoCellFriends", bundle: _R.hostingBundle) }
      var name: String { return "NoGoCellFriends" }
      var reuseIdentifier: ReuseIdentifier<NoGoCell> { return ReuseIdentifier(identifier: "NoGoCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> NoGoCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? NoGoCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _ReplyToComment: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "ReplyToComment", bundle: _R.hostingBundle) }
      var name: String { return "ReplyToComment" }
      var reuseIdentifier: ReuseIdentifier<ReplyToComment> { return ReuseIdentifier(identifier: "ReplyToComment") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> ReplyToComment? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ReplyToComment
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _SendCommentControl: NibResource {
      var instance: UINib { return UINib.init(nibName: "SendCommentControl", bundle: _R.hostingBundle) }
      var name: String { return "SendCommentControl" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _SpreadCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "SpreadCell", bundle: _R.hostingBundle) }
      var name: String { return "SpreadCell" }
      var reuseIdentifier: ReuseIdentifier<SpreadCell> { return ReuseIdentifier(identifier: "SpreadCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> SpreadCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? SpreadCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TimeBucketControlCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TimeBucketControlCell", bundle: _R.hostingBundle) }
      var name: String { return "TimeBucketControlCell" }
      var reuseIdentifier: ReuseIdentifier<TimeBucketControlCell> { return ReuseIdentifier(identifier: "TimeBucketControlCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TimeBucketControlCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeBucketControlCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TimeLineHeaderCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TimeLineHeaderCell", bundle: _R.hostingBundle) }
      var name: String { return "TimeLineHeaderCell" }
      var reuseIdentifier: ReuseIdentifier<TimeLineHeaderCell> { return ReuseIdentifier(identifier: "TimeLineHeaderCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TimeLineHeaderCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeLineHeaderCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TimeLineNoGoCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TimeLineNoGoCell", bundle: _R.hostingBundle) }
      var name: String { return "TimeLineNoGoCell" }
      var reuseIdentifier: ReuseIdentifier<TimeLineNoGoCell> { return ReuseIdentifier(identifier: "TimeLineNoGoCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TimeLineNoGoCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeLineNoGoCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TimeLineTimeBucketCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TimeLineTimeBucketCell", bundle: _R.hostingBundle) }
      var name: String { return "TimeLineTimeBucketCell" }
      var reuseIdentifier: ReuseIdentifier<TimeLineTimeBucketCell> { return ReuseIdentifier(identifier: "TimeLineTimeBucketCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TimeLineTimeBucketCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeLineTimeBucketCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TimeLineTimeZoneCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TimeLineTimeZoneCell", bundle: _R.hostingBundle) }
      var name: String { return "TimeLineTimeZoneCell" }
      var reuseIdentifier: ReuseIdentifier<TimeLineTimeZoneCell> { return ReuseIdentifier(identifier: "TimeLineTimeZoneCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TimeLineTimeZoneCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeLineTimeZoneCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TimeZoneControlCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TimeZoneControlCell", bundle: _R.hostingBundle) }
      var name: String { return "TimeZoneControlCell" }
      var reuseIdentifier: ReuseIdentifier<TimeZoneControlCell> { return ReuseIdentifier(identifier: "TimeZoneControlCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TimeZoneControlCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeZoneControlCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _WeekScoreControlCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "WeekScoreControlCell", bundle: _R.hostingBundle) }
      var name: String { return "WeekScoreControlCell" }
      var reuseIdentifier: ReuseIdentifier<WeekScoreControlCell> { return ReuseIdentifier(identifier: "WeekScoreControlCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> WeekScoreControlCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? WeekScoreControlCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaButtonTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "YonaButtonTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "YonaButtonTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<YonaButtonTableViewCell> { return ReuseIdentifier(identifier: "YonaButtonTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaButtonTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaButtonTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaButtonsTableHeaderView: NibResource {
      var instance: UINib { return UINib.init(nibName: "YonaButtonsTableHeaderView", bundle: _R.hostingBundle) }
      var name: String { return "YonaButtonsTableHeaderView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaButtonsTableHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaButtonsTableHeaderView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaCustomDatePickerView: NibResource {
      var instance: UINib { return UINib.init(nibName: "YonaCustomDatePickerView", bundle: _R.hostingBundle) }
      var name: String { return "YonaCustomDatePickerView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaCustomDatePickerView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaCustomDatePickerView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaCustomPickerView: NibResource {
      var instance: UINib { return UINib.init(nibName: "YonaCustomPickerView", bundle: _R.hostingBundle) }
      var name: String { return "YonaCustomPickerView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaCustomPickerView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaCustomPickerView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaDefaultTableHeaderView: NibResource {
      var instance: UINib { return UINib.init(nibName: "YonaDefaultTableHeaderView", bundle: _R.hostingBundle) }
      var name: String { return "YonaDefaultTableHeaderView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaDefaultTableHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaDefaultTableHeaderView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaTwoButtonTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "YonaTwoButtonTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "YonaTwoButtonTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<YonaTwoButtonTableViewCell> { return ReuseIdentifier(identifier: "YonaTwoButtonTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaTwoButtonTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaTwoButtonTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaUserDisplayTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "YonaUserDisplayTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "YonaUserDisplayTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<YonaUserDisplayTableViewCell> { return ReuseIdentifier(identifier: "YonaUserDisplayTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaUserDisplayTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaUserDisplayTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaUserHeaderWithTwoTabTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "YonaUserHeaderWithTwoTabTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "YonaUserHeaderWithTwoTabTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<YonaUserHeaderWithTwoTabTableViewCell> { return ReuseIdentifier(identifier: "YonaUserHeaderWithTwoTabTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaUserHeaderWithTwoTabTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaUserHeaderWithTwoTabTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _YonaUserTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "YonaUserTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "YonaUserTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<YonaUserTableViewCell> { return ReuseIdentifier(identifier: "YonaUserTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> YonaUserTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? YonaUserTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}